[advice]
	# Set the following values to true/false:
	#pushUpdateRejected
	#pushNonFFCurrent
	#pushNonFFMatching
	#pushAlreadyExists
	#pushFetchFirst
	#pushNeedsForce
	#statusHints
	#statusUoption
	#commitBeforeMerge
	#resolveConflict
	#implicitIdentity
	#detachedHead
	#amWorkDir
	#rmHints

[alias]
	# Diff variants
	di = diff --no-ext-diff
	dm = di AUTO_MERGE
	# Use --no-ext-diff because difft doesnt do word diff
	dw = di --color-words --no-ext-diff
	sh = show --abbrev-commit --stat --pretty=short

	# Add variants
	ad = add -p

	# Shorthands
	br = branch
	ci = commit
	cl = clean
	co = checkout
	f = fetch
	# "pick" ("git-cp" already exists, preventing alias "cp")
	pi = cherry-pick
	r = rebase
	st = status
	m = merge
	mt = mergetool

	# Commit variants
	cia = commit --amend
	cit = commit -m "Tmp"
	cif = commit --fixup
	ciane = commit --amend --no-edit
	cire = commit --reedit-message
	cirh = commit --reuse-message=HEAD
	cireh = commit --reedit-message=HEAD

	# Fetch variants
	# Use fp/fu: 'git fu dev:dev' to update local branch 'dev'
	fu = fetch @{upstream}
	fp = fetch @{push}

	# Listing commits
	# Unlike log --graph this order matches git rev-list --all
	li = log --oneline --decorate --all
	# Double-letter variants using --date-order
	# NOTE Originally we wanted to have lower- and upper-case variants of
	#         {s,ss,h,hh}, but git config is case-insensitive. We prefix upper
	#         case variants with "q".
	# TODO Think of a better alternative some time.
	s = qS -20
	qS = qSS --date-order
	ss = qSS -20
	# TODO Would like to have 'h' accept a <commit> as well but not sure how
	h = qH HEAD -20
	qH = !git qHH --all --date-order --until=$(git show -s --format=%cI ${1:-HEAD})
	hh = qHH HEAD -20

	# Merge variants
	ma = merge --abort
	ms = merge --squash

	# Pick variants
	pia = cherry-pick --abort
	pic = cherry-pick --continue

	# Push varints
	pushu = push --set-upstream

	# Rebase variants
	ra = rebase --abort
	rc = rebase --continue
	ri = rebase --interactive

	# Reset variants
	re = reset --keep
	# "Reset backwards" by N commits (not working)
	#reb = !git reh HEAD~$1
	reh = reset --keep --hard
	reseth = reset --hard # --hard w/o --keep should not be too easy
	res = reset --keep --soft
	# Catching up with upstream/push
	rep = reh @{push}
	reu = reh @{upstream}
	resp = res @{push}
	resu = res @{upstream}

	# Shorthands used by bash aliases s,h,r,rr,p,pp. We prefix the intended name
	# with "q-" to avoid matching prefixes of other commands.
	q-f = di --stat --staged
	q-b = di --stat
	q-di-p = di --ext-diff
	q-di-p2 = di --stat
	q-di-pp = di
	q-di-pp2 = di --stat
	q-di-pw = dw
	q-di-pw2 = di --stat
	q-di-r = di --ext-diff --staged
	q-di-r2 = di --staged --stat
	q-di-rr = di --staged
	q-di-rr2 = di --staged --stat
	q-di-rw = dw --staged
	q-di-rw2 = di --staged --stat

	# TODO: Currently Using numbers instead of names to work on more platforms:
	#   8: "brightblack"
	#   12: "brightblue"

	# Use %ar/%cr when %ah/%ch does not yet work on a platform
	qSS = log --graph --abbrev-commit \
		--pretty=format:'%C(dim yellow)%h %C(dim cyan)(%ch) %C(auto)%s %C(8)• %an %C(reset)%C(dim)%ah%C(auto)%d' --all
	qHH = log --graph --abbrev-commit \
		--pretty=format:'%C(dim yellow)%h %C(dim 12)(%ch) %C(auto)%s %C(8)• %an %C(reset)%C(dim)%ah%C(auto)%d'
	lg = log --graph --abbrev-commit --decorate \
		--format=format:'%C(yellow)%h%C(reset) %C(cyan)%ci %C(12)(%ah) %C(8)• %an%C(reset)%C(auto)%d%C(reset)%n%w(,8)%s'
	lg2 = log --graph --abbrev-commit --decorate \
		--format=format:'%C(yellow)%h%C(reset) %C(cyan)%ci %C(12)(%ch) %C(8)• %cn%C(reset)%C(auto)%d%C(reset)%n%C(dim)%w(,8,8)%ai (%ah) %C(reset)%C(8)• %an%C(reset)%n%C(bold)%s%n%b'

[branch]
	# We don't use this because we use "git s" alias to check branches, but can
	# be handy later if log is clobbered and we dont know the branches well.
	#sort = committerdate

[color]
	# Add color codes even when not to terminal
	#branch = always
	#diff = always
	#interactive = always
	#status = always

	# Only put colour on terminal
	ui = auto

[color "branch"]
	current = "bold 13"
	local = "13"
	remote = "magenta"

[color "decorate"]
	# The branch colours are the same as used in 'git status'
	branch = "bold 13" # 13 == bright magenta
	remoteBranch = "bold magenta"
	remoteTag = "bold green"
	stash = "bold yellow"
	tag = "bold 10" # 10 == bright green
	#head =
	#grafted =

[color "diff"]
	#context =
	#commit =
	#frag =
	meta = bold 11 # 11 == bright yellow
	whitespace = "reverse 9"
	old = 1
	new = 2
	oldMoved = "strike red"
	oldMovedDimmed = "dim strike red"
	newMoved = "ul green"
	newMovedDimmed = "dim ul green"
	oldMovedAlternative = "strike 208" # 208 == orange
	oldMovedAlternativeDimmed = "dim strike 208"
	newMovedAlternative = "ul 33"
	newMovedAlternativeDimmed = "dim ul 33"
	#contextDimmed, oldDimmed, newDimmed, contextBold, oldBold, and newBold

# We use diff-highlight to colourize changed parts between removed and added
# lines. When available, use pager 'delta' instead because it preserved
# highlighted whitespace error.
[color "diff-highlight"]
	# ❕ Diff-highlight script can might hide whitespace errors (compared to
	#    both default colours and the "delta" pager).

	# Subtle colours: dim vs. bright-bold
	oldNormal = "dim 1" # Dim for visbility
	#oldNormal = "dim normal" # Interesting alternative
	oldHighlight = "bold 9"
	newNormal = "dim 2"
	newHighlight = "bold 10"

	# Pronounced colours: using normal vs. reverse
	#oldNormal = "1"
	#oldHighlight = "bold reverse 1"
	#newNormal = "2"
	#newHighlight = "bold reverse 2"

	# Some defaults from internet (for a light scheme)
	#oldNormal = "black #f8cbcb"
	#oldHighlight = "black #ffaaaa"
	#newNormal = "black #cbeecb"
	#newHighlight = "black #aaffaa"

[color "log"]
	# ❔

[color "status"]
	added = "bold green"
	branch = "bold 13" # magenta means bright purple
	changed = "bold 208" # same config option as 'updated'
	header = "dim"
	noBranch = "9 bold" # bright red "Head detached at ..."
	unmerged = "bold red"
	untracked = "bold yellow"
	localBranch = "bold 13"
	remoteBranch = "bold magenta" # bright magenta (means bright purple)

[column]
	#ui = auto

[core]
	# TODO Do we like -F -X at all?
	#pager = less -rFX
	# Using delta pager for slightly better word-diffing and whitespace errors.
	# In some situations, we replace this pager explicitly in [pager] section.
	pager = delta
	editor = nvim
	whitespace=trailing-space
	autocrlf = input
	excludesfile = ~/.gitignore_global

[commit]
	# Show diff while committing
	verbose = true

[credential]
	helper = cache --timeout 7200

[diff]
	algorithm = histogram
	# Also good: difft --display side-by-side-show-both
	# Also good: difft --dispaly inline
	# We use external diff only explicitly by aliasing accordingly
	external = difft
	colorMoved = dimmed-zebra # plain, zebra, dimmed-zebra
	# Possibly gets hidden by "diff-highlight" afterwards
	mnemonicPrefix = true
	# Treatment of moved whitespace. If problem: set "no".
	colorMovedWS = "allow-indentation-change"
	wsErrorHighlight = "all"
	# Warn for whitespace error (diff-highlight might hide ws errors)
	check = "true"
	# Show more context lines around changes
	#context = 10

	# ❔
	submodule = log
	# TODO Remove ignore=untracked later if we dont like it
	ignoreSubmodules = untracked

[difftool]
	prompt = false

[fetch]
	recurseSubmodules = "on-demand"

[help]
	autocorrect = prompt

# TODO: Do we like this?
[includeIf "gitdir:~/example/path/"]
	path = ~/example/path/.gitconfig

[init]
	defaultBranch = master

[interactive]
	singlekey = true # Accept by single key stroke, without enter
	diffFilter = delta --color-only
	#diffFilter = diff-highlight

[log]
	date = iso-local

[merge]
	# diff3 adds original, zdiff3 factors out matching changes
	# TODO: Do we like zdiff3? Else go back to diff3.
	conflictstyle = zdiff3
	# Use neovim as difftool with nvim -d
	tool = nvimdiff

[mergetool]
	# Delete .orig files after resolution
	keepBackup = false

# Applies to nvimdiff, too
[mergetool "vimdiff"]
	# Show different diffs within many tabs
	#   1. default layout
	#   2. LOCAL ↔ REMOTE
	#   3. BASE → LOCAL
	#   4. BASE → REMOTE
	#   5. all files excluding MERGED (which has conflict markers). Could also
	#      just turn off diff mode for MERGED.
	layout = "(LOCAL,BASE,REMOTE) / MERGED + LOCAL,REMOTE + BASE,LOCAL + BASE,REMOTE + LOCAL,BASE,REMOTE"

[pager]
	# Overwrite the global pager setting from [core] if needed. The
	# [interactive] section has its own diffFilter setting.
	#diff = diff-highlight | less -rFX
	#show = diff-highlight | less -rFX
	# In log --graph -p, git-delta pager doesnt work, so we fallback
	# TODO: Do we like the less options -FX?
	log = diff-highlight | less -rFX

[pull]
	ff = only

[push]
	autoSetupRemote = true
	default = simple
	# Push tags automatically, when pushing the commit. We use tags locally
	# a lot so we dont use it now, but maybe later.
	#followtags = true

[rebase]
	# If commit message starts with "fixup! " as set by commit --fixup <id>,
	# the commit will be ammended instead of rebased.
	#autosquash = true
	# Force-update refs on the rebased path (sounds dangerous). For now, use
	# --update-refs manually.
	#updateRefs = true

[rerere]
	# Resolve merge conflicts the same way as in previous conflict. A bit
	# dangerous if we may resolve in different directions.
	enabled = true
	#autoUpdate =

[status]
	submoduleSummary = true

[submodule]
	# Behaves like --recursive for fetch, checkout, ...
	recursive = true

[url "git@github.com"]
	# Replaces https clones with ssh automatically
	#insteadOf = "https://github.com/"
	# Replaces only when pushing
	#pushInsteadOf = "https://github.com/"
	# Allows specifying paths simpler as github:name/repo
	insteadOf = "github"

[user]
	# TOKEN_DOTFILES_USER_CREDENTIALS
	email=commit.author@git.repo
	name=Commit Author

[tag]
	#sort =  taggerdate
	sort = version:refname

# TODO do we want this ❔
#transfer.fsckobjects = true
#fetch.fsckobjects = true
#receive.fsckobjects = true

# vim: filetype=gitconfig noexpandtab tabstop=4 shiftwidth=4 softtabstop=4
