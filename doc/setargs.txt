Implementation: scripts/setargs.sh version 0.0.0

TODO: Add eval mode using return value ❓
TODO: Should positional arguments go into defaulted parameters?

┏━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Setargs ┃ Bash helper to parse arguments                                    ┃
┣━━━━━━━━━┛                                                                   ┃
┃                                                                             ┃
┃ Setars offers a simple interface to read arguments from $@ and declare bash ┃
┃ variables appropriately.                                                    ┃
┃                                                                             ┃
┃ ╭─────────┬────────────────────────────────────────────────╮                ┃
┃ │ Example │ [Eval mode: Does not require unset_args]       │                ┃
┃ ├─────────╯                                                │                ┃
┃ │                                                          │                ┃
┃ │  #     Parameter string                        Arguments │                ┃
┃ │  #            ↓                                    ↓     │                ┃
┃ │  example()                                               │                ┃
┃ │  {                                                       │                ┃
┃ │      set_args "--file-required= --mode=default -x" "$@"  │                ┃
┃ │      eval "$get_args"                                    │ ← Set params   ┃
┃ │                                                          │                ┃
┃ │      echo "Parsed --file-required = $__file_required"    │ ← Use          ┃
┃ │      echo "Parsed --mode = $__mode"                      │                ┃
┃ │      if [[ "$x" == "true" ]]; then echo "Has: -x"; fi    │                ┃
┃ │      if [[ "$x" == "false" ]]; then echo "Not: -x"; fi   │                ┃
┃ │  }                                                       │                ┃
┃ ╰──────────────────────────────────────────────────────────╯                ┃
┃ ╭─────────┬────────────────────────────────────────────────╮                ┃
┃ │ Example │ [Call]                                         │                ┃
┃ ├─────────╯                                                │                ┃
┃ │                                                          │                ┃
┃ │  # Do not give 'optional' parameter -x                   │                ┃
┃ │  example --file-required=foo.txt --mode=bar              │                ┃
┃ │                                                          │                ┃
┃ │  # Leave 'defaulted' parameter --mode at default value   │                ┃
┃ │  example --file-required=baz.txt -x                      │                ┃
┃ ╰──────────────────────────────────────────────────────────╯                ┃
┃                                                                             ┃
┃ Setargs is provided a (typically hardcoded) 'parameter' string. This string ┃
┃ determines the names which can be provided. Depending on the syntax used,   ┃
┃ they become 'required', 'defaulted' or 'optional'.                          ┃
┃                                                                             ┃
┃ "$@" is used as 'arguments' and must match the specified parameters.        ┃
┃                                                                             ┃
┃ When "$get_args"' is evaluated, variables are declared (locally).           ┃
┃                                                                             ┃
┃ The variable name is derived from the parameter. Leading dashes "-" are     ┃
┃ removed, the remaining dashes converted to underscores "_".                 ┃
┃                                                                             ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┃
┃                                                                             ┃
┃ The special parameter --help generates a sed -e expression highlighting     ┃
┃ available parameter names in a help string. The help string                 ┃
┃ [command_name]_help_string is printed and colourized.                       ┃
┃                                                                             ┃
┃                                                                             ┃
┃ ╭─────────┬────────────────────────────────────────────────╮                ┃
┃ │ Example │ [Help string: Autoformat using sed]            │                ┃
┃ ├─────────╯                                                │                ┃
┃ │                                                          │                ┃
┃ │  example2()                                              │                ┃
┃ │  {                                                       │                ┃
┃ │      declare example3_help_string="Header linection      │ ← Help string  ┃
┃ │                                                          │                ┃
┃ │        Full description below. May contain --mode=value  │                ┃
┃ │        and other parameter names.";                      │                ┃
┃ │                                                          │                ┃
┃ │      set_args "--example= --mode=default --help" "$@"    │                ┃
┃ │      eval "$get_args";                                   │                ┃
┃ │  }                                                       │                ┃
┃ │  example2 --help;                                        │ ← Colour help  ┃
┃ │  # sed -e "$help" <<< "$example2_help_string";           │                ┃
┃ │                                                          │                ┃
┃ ╰──────────────────────────────────────────────────────────╯                ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┌────────────┬────────────────────────────────────────────────────────────────┐
│ Parameters │ Typically hardcoded. Specify allowed arguments.                │
├────────────┘                                                                │
│                                                                             │
│ ✖ Names MUST start with "-"                                                 │
│ ✖ Names MUST contain only alphanum, dash and underscore [a-zA-Z0-9_-]       │
│ ✔ 'required' parameters end on "=". They have NO default value.             │
│ ✔ 'defaulted' parameters with "=default_value".                             │
│ ✔ 'optional' names do not contain "=". Default to 'false'/'true'.           │
│ ✖ Default values MUST NOT contain whitespace.                               │
│ ✖ Dividing "=" MUST NOT be surrounded by whitespce.                         │
│                                                                             │
│ ✖ --autocomplete: Reserved. MUST NOT be used.                               │
│ ✔ --help: Special name. MUST be 'optional'. Value is set to sed expression  │
│           that colours --parameters with ANSI colour codes.                 │
│ ✔ "--": Special parameter without name: Enables 'argv' parameter.           │
│                                                                             │
│╭──────────────────────────┬────────────────────────────────────────────────╮│
││  parameter string        │     meaning                                    ││
│├──────────────────────────┼────────────────────────────────────────────────┤│
││  --required=             │ ✔   Argument MUST occur with value             ││
││  --defaulted=def_value   │ ✔   Argument MAY occur; else has default value ││
││  --optional              │ ✔   Argument is optional; MAY NOT be provided  ││
││  "-r= -d=foo -o"         │ ✔   Specify one parameter of each kind         ││
││  --                      │ ✔   Enables 'argv' parameter                   ││
││                          │                                                ││
││  name=wrong              │ ✖   Name MUST start with "-"                   ││
││  "-too" "-many" "-words" │ ✖   Parameters MUST be a single word           ││
││  --help=default          │ ✖   Special name '--help'. MUST be 'optional'  ││
││  --autocomplete          │ ✖   Reserved. MUST NOT be used                 ││
││  -                       │ ✖   Argv is activated by "--"                  ││
││  ---                     │ ✖   Argv is activated by "--"                  ││
│╰──────────────────────────┴────────────────────────────────────────────────╯│
└─────────────────────────────────────────────────────────────────────────────┘
┌───────────┬─────────────────────────────────────────────────────────────────┐
│ Arguments │ Typically "$@". Provide data according to the parameter string. │
├───────────┘                                                                 │
│                                                                             │
│ ✔ Set value of matching parameter names                                     │
│ ✔ MAY omit 'defaulted' and 'optional' parameters                            │
│ ✖ MUST Provide value for 'required' parameters                              │
│ ✖ MUST NOT introduce new names                                              │
│                                                                             │
│╭───────────────────────┬──────────────────────────────────────────────────╮ │
││ argument string(s)    │     meaning                                      │ │
│├───────────────────────┼──────────────────────────────────────────────────┤ │
││ --name=value          │ ✔   Value "value" given for "name"               │ │
││ --defaulted=overwrite │ ✔   Value "overwrite" replaces the default value │ │
││ --optional=value      │ ✔   Provide value for "optional" immediately     │ │
││ --optional            │ ✔   Provide optional without value ("true")      │ │
││ --requires=value      │ ✔   Provide immediate value                      │ │
││ --name split_data     │ ✔   Provide value "split_data" as split data     │ │
││ -r=foo -- more --data │ ✔   Provide positional data "more" and "--data"  │ │
│╰───────────────────────┴──────────────────────────────────────────────────╯ │
└─────────────────────────────────────────────────────────────────────────────┘
┌─────────────┬───────────────────────────────────────────────────────────────┐
│ Values/data │ The strings which setargs will assign to bash variables.      │
├─────────────┘                                                               │
│                                                                             │
│ ✔ Immediate values using --name=data                                        │
│ ✔ Immediate data may contain hyphens "-" or spaces " " (or any other symbol)│
│                                                                             │
│╭────────────────────────┬───────────────────────────────────╮               │
││  parameter string      │     argumment                     │               │
│├────────────────────────┼───────────────────────────────────┤               │
││  "-n"                  │ ✔   -n=4                          │               │
││  "-n=1"                │ ✔   -n=4                          │               │
││  "--required="         │ ✔   --required=data               │               │
││  "--required=default"  │ ✔   "--required= data with space" │               │
││  "--flag=--default"    │ ✔   --flag=--data-with-dashes     │               │
│╰────────────────────────┴───────────────────────────────────╯               │
│                                                                             │
│ ✔ 'required'/'defaulted' parameters MAY split argument data from name       │
│ ✖ 'optional' parameters MUST NOT use split data (interpreted as positional) │
│ ✖ Split data also MUST NOT start with "-" (would be a new --name)           │
│                                                                             │
│╭────────────────────────┬───────────────╮                                   │
││  parameter string      │     arguments │                                   │
│├────────────────────────┼───────────────┤                                   │
││  "-n=1"                │ ✔   -n 4      │                                   │
││  "-n="                 │ ✔   -n 4      │                                   │
││  "-n"                  │ ✖   -n 4      │                                   │
││  "-n=1"                │ ✖   -n -4     │                                   │
│╰────────────────────────┴───────────────╯                                   │
│                                                                             │
│ ✔ Positional data matches {remaining, non-'optional'} parameter names       │
│   ✔   string                                                                │
│   ✔   "quoted string"                                                       │
│   ✖   --start_with_dash                                                     │
│   ✖   -start_with_dash                                                      │
│                                                                             │
│╭──────────────────────────────────────────────────┬──────────────────────╮  │
││   invocation                                     │ variables created    │  │
│├──────────────────────────────────────────────────┼──────────────────────┤  │
││ ✔ set_args "-p1=  -p2=  -p3="  d1 d2 d3          │  p1=d1  p2=d2  p3=d3 │  │
││ ✔ set_args "-p1=x -p2=y -p3=z" d1 d2 d3          │  p1=d1  p2=d2  p3=d3 │  │
││ ✔ set_args "-p1=  -p2=  -p3="  --p2=A d1 d3      │  p1=d1  p2=A   p3=d3 │  │
││ ✔ set_args "-p1=  -p2=  -p3="  --p2 B d1 d3      │  p1=d1  p2=B   p3=d3 │  │
││ ✔ set_args "-p1=x -p2=y -p3=z" d1 d2             │  p1=d1  p2=d2  p3=z  │  │
││ ✔ set_args "-p1=x -p2=y -p3=z" d1                │  p1=d1  p2=y   p3=z  │  │
││ ✔ set_args "--name" data_for_optional_attempted  │ ✖                    │  │
││ ✖ set_args "--name=" --data_starting_with_dash   │ ✖                    │  │
││ ✖ set_args "--name=" too much data               │ ✖                    │  │
││ ✖ set_args "--opt --n=default" overwrite_default │ ✖                    │  │
│╰──────────────────────────────────────────────────┴──────────────────────╯  │
│                                                                             │
│ ✔ Trailing data: All arguments after double dash "--" are interpreted as    │
│                  positional data. Data after "--" MAY contain any symbol.   │
│                                                                             │
│╭─────────────────────────────────────────────────────────────────────────╮  │
││   Trailing data exampels                                                │  │
│├─────────────────────────────────────────────────────────────────────────┤  │
││ ✔ set_args "--required=" -- -start_with_dash_in_trailing_data           │  │
││ ✔ set_args "--required=" -- ---start_with_dash_in_trailing_data         │  │
││ ✔ set_args "--required=" -- "- quite --wild data, but only 1 data word" │  │
││ ✔ set_args "-f --required="    -- -f                                    │  │
││ ✖ set_args "-f --required=" -f --                                       │  │
││ ✖ set_args "--required=" --                                             │  │
││ ✖ set_args "-f=f -g=" -- dat1 dat2 dat3                                 │  │
│╰─────────────────────────────────────────────────────────────────────────╯  │
│                                                                             │
│ ✔ Leftover argv: IFF special parameter "--" is provided, there MAY be more  │
│                  positional arguments than parameters to assign. Leftover   │
│                  positional parameters are written to variable "argv",      │
│                  which can be read and tested for length. When special      │
│                  parameter "--" is provided, variable "argv" is always      │
│                  declared and may have length 0.                            │
│                                                                             │
│╭──────────────────────────────────┬───────────────────────────────────────╮ │
││   Leftover argv exampels         │                                       │ │
│├──────────────────────────────────┼───────────────────────────────────────┤ │
││ ✔ set_args "-r= --" 1 2 3        │ argv=("2" "3")                        │ │
││ ✔ set_args "-f --"  1 2 3        │ argv=("1" "2" "3")                    │ │
││ ✔ set_args "-r= --" 1            │ argv=()                               │ │
││ ✖ set_args "-r="    1 2 3        │ # Too many positional arguments       │ │
││ ✔ set_args "-r="    1            │ # argv undeclared ("--" missing)      │ │
│╰──────────────────────────────────┴───────────────────────────────────────╯ │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────┬───────────────────────────────────────────────────────────────────┐
│ Gotchas │ These things might be unexpected.                                 │
├─────────┘                                                                   │
│                                                                             │
│ ✖ 'optional' parameters DO NOT match positional data (they are skipped)     │
│ ✖ 'optional' parameters DO NOT allow split data                             │
│ ✔ 'optional' parameters implicitly default to "false" or "true"             │
│ ✔ 'optional' parameters MAY be set to a different value                     │
│ ✖ 'defaulted' parameters CANNOT have empty default                          │
│   • --name=  describes a 'required' parameter                               │
│   • Use 'optional' parameter or dummy value instead                         │
│ ✖ 'optional' parameters DO NOT combine when using single dash               │
│ ✖ Positional data will fill 'required' and 'defaulted' parameters before    │
│   filling the "argv" variable.                                              │
│╭──────────────────┬────────────────────────────╮                            │
││  parameter       │     arguments              │                            │
│├──────────────────┼────────────────────────────┤                            │
││  --optional      │ ✖   --optional split_data  │                            │
││  --optional      │ ✖   positional_data        │                            │
││  --optional      │ ✖   -- trailing data       │                            │
││  --optional      │ ✔   --optional=value       │                            │
││  --required=     │ ✖                          │                            │
││  --optional      │ ✔                          │                            │
││  --deaulted=def  │ ✔                          │                            │
││  "-a -b -c"      │ ✖   -abc                   │                            │
│╰──────────────────┴────────────────────────────╯                            │
│                                                                             │
│ • Some parameter names are reserved for special cases:                      │
│╭──────────────────┬─────────────────────────────────────────╮               │
││  parameter       │ functionality                           │               │
│├──────────────────┼─────────────────────────────────────────┤               │
││  --autocomplete  │ Used for bash parameter autocompletion  │               │
││  --help          │ Used for usage info                     │               │
│╰──────────────────┴─────────────────────────────────────────╯               │
│                                                                             │
│ • Declared variables have no leading underscores. --param-name → param_name │
│ • Inputs ARE NOT sanitized or verified (!)                                  │
└─────────────────────────────────────────────────────────────────────────────┘

┌───────────┬─────────────────────────────────────────────────────────────────┐
│ Algorithm │ Concept implemented by set_args()                               │
├───────────┘                                                                 │
│ 1. Parsing parameters                                                       │
│   INPUT (parameters): "--optional --name=default --requires-value="         │
│   -> Categorize                                                             │
│     - required                                                              │
│     - defaulted                                                             │
│     - optional                                                              │
│   -> Store                                                                  │
│     - Order or occurence of {required, defaulted} parameters                │
│     - any known (default) values                                            │
│─────────────────────────────────────────────────────────────────────────────│
│ 2. Parse argument list                                                      │
│   INPUT (arguments): --flag --split-arg split_data --name=overwrite_default │
│   -> Categorize                                                             │
│     - provided (in some way)                                                │
│     - provided by name (immediate or split data, no data for 'optionals')   │
│   -> Store                                                                  │
│     - leftover data args (stuff not starting with - or after --), in order  │
│       -> as positional data for step 3.                                     │
│     - any value provided by immediate or split data (overwrite previous)    │
│─────────────────────────────────────────────────────────────────────────────│
│ 3. Match positional arguments                                               │
│   - Iterate parameters in order                                             │
│   - Check if provided already (in some way)                                 │
│   -> Else match parameter name to stored positional data                    │
│─────────────────────────────────────────────────────────────────────────────│
│ 4. Generate variables                                                       │
│   - Iterate all parameter names                                             │
└─────────────────────────────────────────────────────────────────────────────┘
