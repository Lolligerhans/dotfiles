#!/bin/false

# Bash aliases, sourced in bashrc_personal

# We reserve single-character commands for moment-to-moment workflows. If you
# want you special short command, use a leader like "," or "+" or whatever.

#_______________________________________________________________________
# runscript aliases
    # "Execute" command because "r" is already used by our git aliases
    alias e='./run.sh';
    alias E='~/dotfiles/run.sh';
    alias t="E run scripts/tests"; # Probably remove this some time :D
#    alias q='source ~/dotfiles/scripts/run_script_completion.sh; ./run.sh print_commands';
    alias q='./run.sh help';  # Previously: print_commands
    alias Q='./run.sh interactive';

#_______________________________________________________________________
# git

alias s='git --no-pager f; git s; git b;';
alias S='git s -99999';
alias h='git --no-pager f; git h; git b;';

alias n='git st';
alias m='git st --short --branch';

alias p='git di-p; git di-p2';
alias pp='git di-pp; git di-pp2';
alias pw='git di-pw; git di-pw2';
alias r='git di-r; git di-r2;';
alias rr='git di-rr; git di-rr2';
alias rw='git di-rw; git di-rw2';
alias H='git diff master HEAD';

alias a='git add -p';
alias a='git add -p';
alias u='git add -u';

# ______________________________________________________________________________
# Vim
#
  declare -x _vim='nvim'; # Set to "vim" or "nvim"
  alias Nvim='nvim -i NONE'; # New-vim: ignore shada

  # Short term session
  alias vims="vim -S Session.vim"
  # Long term session
  alias vimS="vim -S Session_long.vim"
  # Switch to vim: Bring to foreground or open new.
  alias v='(("$(jobs -p | wc -l)" == 0)) && { vims || :; } || fg '"'"'${_vim}'"'"' || fg nvim || fg vim;'
  alias V='(("$(jobs -p | wc -l)" == 0)) && { vimS || :; } || fg '"'"'${_vim}'"'"' || fg nvim || fg vim';

# ______________________________________________________________________________
# Git
#
# (!) If you want to use aliases from vim plugin fugitive, map them to a git
# alias as much as possible. Specifically stuff where fugitive is helpful, i.e.,
# "c=git commit" (can lookup and copy-paste stuff into the commit message more
# easily). Then you can use them in fugitive with :Git [command].

alias a="git ad";
alias c="git ci";
alias ca="git cia";
alias cr="git cireh";
alias co="git co";

# Fishdev
alias B="e bench --all";
alias b="e bench --all --build";
alias yeli="./yell import";
alias yelp="./yell pick";

# ______________________________________________________________________________
# Gui filetypes

    alias pdf='evince'
    alias png='eog'
    alias svg='eog';

# ______________________________________________________________________________
# system
  alias bat="batcat";
  alias iftop='sudo iftop -c $HOME/.iftoprc';
  alias j="jupyter lab";
  # Used for bash completion based on history
  alias w='fc -s';
  alias W='fc -s';
  alias wget='wget -c';

# Super-cd command for navigating directories
# TODO This function was basically retired by the find_file function We have no
#      completion for find_file; it is not really needed, but maybe add later so
#      it can auto-generate file-prefixes.
#      We keep it for now in case we do not have fzf available.
supercd()
{
  if (($# == 0)); then
    declare -a _o=();
    IFS=$'\n' _o=( $(find . -path '*/.*' -prune -o -type d -print | fzf -1 --print-query --preview "ls --color=always -Fh {}") );
#    >&2 echo "fzf result: [${_o[@]}]";
    if ((${#_o[@]} > 1)); then
      _p="${_o[1]}";
      if [[ -d "${_o[1]}" ]]; then
#        >&2 echo "Directory found: ${_o[@]}";
#        >&2 echo "Moving to: ${_p}";
        cd "$_p";
      else
        # TODO Obsolete: using "-type d" now now
        # If fzf found something that means the user accepted the suggestion. Go
        # there.
        { >&2 echo "supercd: Moving to "'$'"(dirname \"$_p\")"; cd "$(dirname "$_p")"; } ||
          { ret="$?"; >&2 echo "Fallback didnt work!"; };
        return 0;
      fi
    else
      >&2 echo "supercd: Ony the query is left :(";
      cd "$_o" ||
      { ret="$?";
#        >&2 printf "%s\n" "supercd: TODO: enter \", $_o\" for the user when this happens";
#        set -vx
        bind '"\e[0n": ", '"${_o}"'"'; printf '\e[5n';
#        set +vx;
        return "$ret"; };
      return 0;
    fi
  else
    # TODO use it as input for fzf instead
    cd "$1";
    declare -i ret=$?;
    (($# >= 2)) && printf "%s\n" "supercd: more than one argument" >&2;
    return $ret;
  fi
}

# For find_file: show path preview in colour
declare -x _text_user="${text_user}";
declare -x _text_normal="${text_normal}";
_preview_path()
{
  if [[ -d "$1" ]]; then
    echo -n "$_text_user";
    command ls -d -- "$1";
    echo -n "$_text_normal";
    command ls --color=always -F -- "$1";
  else
    command batcat --color=always --style=header -- "$1";
  fi
}
export -f _preview_path; # Make available for fzf

# Wrapper for _find_file that automatically inserts "--" after the first argument
# not starting with "-".
find_file()
{
  declare -i i=0
  for ((i = 1; i <= $#; i++)); do
    #echo "DEBUG testing word [${@:i:1}]";
    if [[ ! "${@:i:1}" =~ ^- ]]; then
      #echo "DEBUG: First non-option word: ${@:i:1}, Adding -- before ${@:i:1}";
      break;
    fi
  done
  #echo "DEBUG: i=$i, args: _find_file [${@:1:i-1} -- ${@:i}]"
  _find_file "${@:1:i-1}" -- "${@:i}"
}

# Use find_file so that we relax the need of the caller providing "--"
_find_file()
{
  #echo "DEBUG: Calling _find_file with $# args:";
  #printf "  %s\n" "$@";
  if (( $# > 0 )) && [[ "$1" == "--help" ]]; then
    echo 'find_file: find âžœ fzf';
    echo ' Result is a path.';
    echo " Usage: $FUNCNAME [-c|-d|-|-F|-p] [-h|-H]";
    echo "        $FUNCNAME [-options] path [query]";
    echo '  -c: cd to result (dirname if a file)';
    echo '  -d: Pushd to result (dirname if a file)';
    echo '  -f: Include files (default)';
    echo '  -F: Exclude files';
    echo '  -h: Include hidden files';
    echo '  -H: Include hidden dirs';
    echo '  -l: List result only (no fzf)';
    echo '  -p: Show result with batcat ';
    return 0;
  fi

  # Sanity check
  if [[ "$(shopt -p nocasematch)" != "shopt -u nocasematch" ]]; then
    >&2 echo "ERROR: $FUNCNAME: shopt -u nocasematch not unset";
    echon "Needed for case-sensitive matching of options.";
    return 1
  fi

  # Use getopts to detect
  declare -i change=0 dirs_only=0 pager=0 hidden_files=0 hidden_dirs=0 dopushd=0 list_only=0;
  declare opt;
  declare OPTIND; # So that we dont use the OPTIND from the interactive shell
  while getopts "cdfFhHlp" opt; do
    #echo "DEBUG: $FUNCNAME: Readin option flag [-$opt]"
    case "$opt" in
      c) change=1;; # Change directory to dirname of result
      d) dopushd=1;;
      f) dirs_only=0;;
      F) dirs_only=1;;
      h) hidden_files=1;; # Include hidden files
      H) hidden_dirs=1;;  # Include hidden dirs
      l) list_only=1;;
      p) pager=1;; # Show file instead of cd to dirname
      \?) 1>&2 echo "ERROR: $FUNCNAME: Invalid option: -$OPTARG" 1>&2; return 1;;
    esac
  done
  shift $((OPTIND-1));

  # Option saniy check
  if (( dopushd && change )); then
    1>&2 echo "$FUNCNAME: Warning: -d has precendence over -c";
  fi
  if (( (change || dopushd) && pager )); then
    1>&2 echo "$FUNCNAME: Warning: -{d,c} have precendence over -p";
  fi
  if (( dirs_only && hidden_files )); then
    1>&2 echo "$FUNCNAME: Warning: -F has precendence over -h";
  fi
  if (( list_only && (change || dopushd || pager) )); then
    1>&2 echo "$FUNCNAME: Warning: -l has precendence over -{c,d,p}";
  fi

  if (( $# > 2 )); then
    1>&2 echo "WARNING: $FUNCNAME: Too many arguments";
  fi

  #####################################
  # Determine find/fzf inputs
  #####################################
  # TODO Maybe it is better to use $1 as path, and move query into a -q option
  declare find_path="${1:-"."}";
  declare fzf_query="${2:-}";
  if [[ ! -d "$find_path" ]]; then
    1>&2 echo "WARNING: $FUNCNAME: No such directory '$find_path' (continuing with '.')";
    find_path=".";
  fi
  declare fzf_command="cat";
  if (( !list_only )); then
    fzf_command=(fzf -1 --query="$fzf_query" --preview "_preview_path {}");
  fi

  #>&2 echo "DEBUGGING: $FUNCNAME: fzf_query=$fzf_query"
  #>&2 echo "DEBUGGING: $FUNCNAME: change=$change"
  #>&2 echo "DEBUGGING: $FUNCNAME: dirs_only=$dirs_only"
  #>&2 echo "DEBUGGING: $FUNCNAME: dopushd=$dopushd"
  #>&2 echo "DEBUGGING: $FUNCNAME: hidden_dirs=$hidden_dirs"
  #>&2 echo "DEBUGGING: $FUNCNAME: hidden_files=$hidden_files"
  #>&2 echo "DEBUGGING: $FUNCNAME: pager=$pager"
  #>&2 echo "DEBUGGING: $FUNCNAME: find_path=$find_path"
  #>&2 echo "DEBUGGING: $FUNCNAME: ${fzf_command[@]@A}"

  declare -a dirs_only_flag=();
  declare -a hidden_flag=();
  if (( dirs_only == 1)); then
    dirs_only_flag=('(' -not -type d -prune ')' -o);
  fi

  if (( !hidden_files && hidden_dirs )); then
    hidden_flag=('(' -type f -a -name '.?*' -prune ')' -o);
    >&2 echo "$FUNCNAME: DEBUG: hide files";
  elif (( !hidden_dirs && hidden_files )); then
    hidden_flag=('(' -type d -a -name '.?*' -prune ')' -o);
    >&2 echo "$FUNCNAME: DEBUG: hide directories";
  elif (( !hidden_dirs && !hidden_files )); then
    hidden_flag=( '('            -name '.?*' -prune ')' -o );
    #>&2 echo "$FUNCNAME: DEBUG: All hidden";
  else
    >&2 echo "$FUNCNAME: DEBUG: All shown";
  fi
  #echo "DEBUGGING: ${dirs_only_flag[@]@A}";
  #echo "DEBUGGING: ${hidden_flag[@]@A}";

  #####################################
  # Determine output (usually with fzf)
  #####################################
  declare out;
  # If query is already a valid dirs_only path, skip searching
  if (( dirs_only )) && [[ -d "$fzf_query" ]]; then
    # Special case: no search needed
    out="$fzf_query";
    >&2 echo "$FUNCNAME: DEBUG: skipping search: $out"
  else
    declare pipe_name;
    pipe_name="$(mktemp -u)";
    mkfifo "$pipe_name";
    declare -i err=0;
    command find "${find_path}" -mindepth 1 "${hidden_flag[@]}" "${dirs_only_flag[@]}" -print > "$pipe_name" &
    # Ignore fzf failure but capture nonzero exit codes
    out="$("${fzf_command[@]}" <"$pipe_name")" || err="$?";
    kill "$!" # Stop 'find' process (last background process)
    wait "$!" 2>/dev/null;
    rm "$pipe_name";
    case "$err" in
      "0") :;;
      "130") >&2 echo "$FUNCNAME: fzf interrupted with ctrl-c or esc"; return 0;;
      *) 1>&2 echo "ERROR: $FUNCNAME: fzf failed with code $err"; return "$err";;
    esac
  fi

  # Print search result to console no matter what
  echo "$out";
  if (( list_only )); then
    return 0;
  fi

  # For cd or pushd, if out is a file, replace out by its dirname to allow
  # changing into it.
  if (( change || dopushd )) && [[ ! -d "$out" ]]; then
    >&2 echo "$FUNCNAME: DEBUG: '${out}' is not a directory, using dirname";
    out="$(dirname "$out")";
  fi

  # Perform operation on result: cd, page, pushd, ls, ...
  if (( dopushd )); then # TODO rename to dir_push?
    pushd -- "$out";
  elif (( change )); then # TODO rename to dir_change?
    cd -- "$out";
  elif (( pager )); then
    if [[ -d "$out" ]]; then
      command ls --color=always -Fhl "$out" | batcat --color=always;
    else
      command batcat --color=always "$out";
    fi
  fi
}


# ______________________________________________________________________________
# Files operations

# Output context of line $1
#
# $1: Line number
# ($2: File name)
# If no file is given, read from stdin
body()
{
  # If no file is given, pass along stdin
  if (( $# < 2 )); then
    exec 3<&0; # TODO Choose available descriptor automatically?
  else
    exec 3<"${2:?body: Missing file}";
  fi
  declare -i _start _stop;
  _start=$(( ${1:?body: Missing line} < 5 ? 1 : ${1} - 4 ));
  _stop=$(( ${1} + 4 ));
  sed -ne "${_start},${_stop}p" <&3
}

# ______________________________________________________________________________
# File browsing

  alias dot='cd ~/dotfiles';
  alias Dot='pushd ~/dotfiles';
  alias the='cd ~/thesis';
  alias fin='find . -iname';
  alias fuzz='cd ~/Workspace/SSH-Fuzzer/ || cd ~/github/ssh-fuzzer';
  alias muse='cd ~/Documents/MuseScore4/Scores';

  # â„¹ -h âžœ  hidden files
  # â„¹ -H âžœ  hidden dirs
  # â„¹ -F âžœ  exclude files
  alias f='find_file -p'; # page file
  alias d='find_file -Fc';  # cd dir
  alias dd='find_file -Fd'; # pushd dir

  _dirs()
  {
    #echoi() { command echo "$text_bly$@"; command echo; };
    declare out="" prefix="";
    out="$(dirs -l -p)";
    #echoi ${out@A}

    prefix="$(sed -e '$!{N;s/^\(.*\).*\n\1.*$/\1\n\1/;D;}' <<< "${out}")";
    #echoi ${prefix@A}
    #prefix="${prefix%"/"*}";
    #echoi ${prefix@A}

    declare -a outa;
    mapfile -t outa <<< "${out#*$'\n'}";
    #echoi ${outa[@]@A};

    echo "$text_user_soft$prefixâ€¦$text_normal ${outa[@]//"${prefix}"/â€¦}";
  }

  _pushd() { pushd "$@" >/dev/null; _dirs; };
  _popd() { popd >/dev/null; _dirs; };

  alias D='_pushd'; # Clean with dirs -c
  alias DD='_popd';
  alias y='_pushd -0';
  alias yy='_pushd -1';
  alias x='_pushd +1'; # Back 1 in time = shift stack left = move right
  alias xx='_pushd +2';
  alias ..='cd ..';
  alias ...='cd ../..';

# Delete files named in $@ by moving below /tmp/del.
# /tmp/** is cleared on startup.
del()
{
  declare ret=0;
  mkdir /tmp/del;
  while (( $# > 0 )); do
    if [[ -d "$1" || -f "$1" ]]; then
      mv -f "$1" "/tmp/del/$1_$RANDOM";
    else
      1>&2 echo "$FUNCNAME: Error: $1: No such file or directory";
      ret=1;
    fi
    shift;
  done
  return $(($? && ret));
}

# ls variants
  # Sorted
  alias l='command ls --color=auto -Fh -A -ltr'; # List by last-modified
  alias ll='command ls --color=auto -Fh -A -l'; # List by name
  alias lS='command ls --color=auto -Fh -A -lSr'; # List by size
  # Contents
  alias la='command ls --color=auto -Fh -ltr'; # Hide hidden files
  alias ls='command ls --color=auto -Fh -A'; # Names only (table)
  # List N last modified files with 'L -N'
  alias L='command ls --color=auto -FhA -t | head';
  alias tree='tree -CF';

# ______________________________________________________________________________
# Quick aliases: A bunch of short aliases that you can delete if you dont use
# them. We use "," as leader for these.

# Git
  # "go git"
  alias ,gg='cd "$(git rev-parse --show-cdup)"';  # Move relative to base repo
  alias ,gp='git push';
  # "git push -u"
  alias ,gpu='git push --set-upstream';
  # "git commit -m Tmp"
  alias ,gct='git cit';
  alias ,gt='git cit && git push';
  # "git commit --amend"
  alias ,gca='git cia';
  alias ,gms='git ms';
  # Diff
  alias ,gdp='git diff @{push}';
  alias ,gdu='git diff @{upstream}';

# Terminaly
  # Name matches the entry in .bash_completion
  # FIXME This alias is basically replaced by 'alias d' and 'alias f', using the
  # find_file function. Only the completion is better here (since there is
  # completion at all).
  alias ,='supercd';

# Tools

  # Fuzzy find within files
  ,,()
  {
    # TODO
    >&2 echo [!] "Not iplemented yet https://github.com/junegunn/fzf/blob/master/ADVANCED.md#ripgrep-integration";

    rg --color=always --line-number --no-heading --smart-case "${*:-}" |
    fzf --ansi \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --delimiter : \
        --preview 'bat --color=always {1} --highlight-line {2}' \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
        --bind 'enter:become(vim {1} +{2})'
    # TODO Old fzf does not support become action
  }

# vim: set ft=bash:
